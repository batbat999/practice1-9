import java.time.*;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.*;

public class DateCalculator {

    private static final Set<LocalDate> HOLIDAYS = new HashSet<>();

    static {
        // 範例設定幾個假日，可擴充到 2030 年
        HOLIDAYS.add(LocalDate.of(2025, 1, 1));  // 元旦
        HOLIDAYS.add(LocalDate.of(2025, 2, 28)); // 和平紀念日
        HOLIDAYS.add(LocalDate.of(2025, 10, 10)); // 雙十國慶
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("請輸入日期 (yyyyMMdd / yyyy-MM-dd / timestamp)：");
        String input = scanner.nextLine();

        try {
            LocalDate date = parseInputDate(input);
            LocalDate today = LocalDate.now();

            long totalDays = ChronoUnit.DAYS.between(date, today);
            long workdays = calculateWorkdays(date, today);

            System.out.println("天數差異：" + totalDays + " 天");
            System.out.println("工作日差異：" + workdays + " 天");
        } catch (IllegalArgumentException e) {
            System.out.println("輸入錯誤：" + e.getMessage());
        }
    }

    private static LocalDate parseInputDate(String input) {
        try {
            if (input.matches("\\d{8}")) {  // yyyyMMdd
                DateTimeFormatter fmt = DateTimeFormatter.ofPattern("yyyyMMdd");
                return LocalDate.parse(input, fmt);
            } else if (input.matches("\\d{4}-\\d{2}-\\d{2}")) { // yyyy-MM-dd
                return LocalDate.parse(input);
            } else if (input.matches("\\d{10,}")) { // timestamp: 至少10位數
                long millis = Long.parseLong(input);
                return Instant.ofEpochMilli(millis).atZone(ZoneId.systemDefault()).toLocalDate();
            } else {
                throw new IllegalArgumentException("輸入格式不正確，請使用 yyyyMMdd / yyyy-MM-dd / timestamp。");
            }
        } catch (DateTimeParseException | NumberFormatException e) {
            throw new IllegalArgumentException("日期格式解析錯誤。", e);
        }
    }

    private static long calculateWorkdays(LocalDate start, LocalDate end) {
        long workdays = 0;
        LocalDate d = start.isBefore(end) ? start : end;
        LocalDate target = start.isBefore(end) ? end : start;

        while (d.isBefore(target)) {
            DayOfWeek dow = d.getDayOfWeek();
            if (dow != DayOfWeek.SATURDAY && dow != DayOfWeek.SUNDAY && !HOLIDAYS.contains(d)) {
                workdays++;
            }
            d = d.plusDays(1);
        }
        return workdays;
    }
}
