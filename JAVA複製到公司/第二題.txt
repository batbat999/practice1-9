import java.math.BigInteger;
import java.util.*;

public class Factorization {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("請輸入大於1的整數 (2~10^19)：");
        String input = scanner.nextLine();

        try {
            BigInteger num = parseAndValidateInput(input);
            List<BigInteger> factors = factorize(num);
            System.out.print("因式分解結果：");
            for (int i = 0; i < factors.size(); i++) {
                if (i > 0) System.out.print(" x ");
                System.out.print(factors.get(i));
            }
            System.out.println();
        } catch (IllegalArgumentException e) {
            System.out.println("輸入錯誤：" + e.getMessage());
        }
    }

    private static BigInteger parseAndValidateInput(String input) {
        try {
            BigInteger num = new BigInteger(input);
            if (num.compareTo(BigInteger.TWO) < 0) {
                throw new IllegalArgumentException("數字必須 ≥ 2");
            }
            BigInteger upperLimit = new BigInteger("10000000000000000000"); // 10^19
            if (num.compareTo(upperLimit) > 0) {
                throw new IllegalArgumentException("數字不能超過 10^19");
            }
            return num;
        } catch (NumberFormatException e) {
            throw new IllegalArgumentException("輸入必須是有效的整數", e);
        }
    }

    private static List<BigInteger> factorize(BigInteger n) {
        List<BigInteger> factors = new ArrayList<>();
        BigInteger two = BigInteger.TWO;

        // 先分解 2
        while (n.mod(two).equals(BigInteger.ZERO)) {
            factors.add(two);
            n = n.divide(two);
        }

        // 從 3 開始，以奇數試除
        BigInteger i = BigInteger.valueOf(3);
        BigInteger sqrtN = sqrt(n);
        while (i.compareTo(sqrtN) <= 0) {
            if (n.mod(i).equals(BigInteger.ZERO)) {
                if (i.isProbablePrime(10)) {  // 題1的質數判斷
                    factors.add(i);
                    n = n.divide(i);
                    sqrtN = sqrt(n);  // 更新 sqrt(n) 因為 n 已縮小
                }
            } else {
                i = i.add(BigInteger.TWO);  // 只試奇數
            }
        }

        if (n.compareTo(BigInteger.ONE) > 0) {
            factors.add(n);  // 剩下的 n 是最後一個質數
        }

        return factors;
    }

    // 求 BigInteger 平方根（使用二分法）
    private static BigInteger sqrt(BigInteger x) {
        BigInteger left = BigInteger.ZERO;
        BigInteger right = x;
        while (left.compareTo(right) < 0) {
            BigInteger mid = left.add(right).shiftRight(1);
            if (mid.multiply(mid).compareTo(x) < 0) {
                left = mid.add(BigInteger.ONE);
            } else {
                right = mid;
            }
        }
        return left;
    }
}
